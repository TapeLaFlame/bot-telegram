import asyncio
import logging
import os
import sqlite3
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))  # –ü—Ä–∏–º–µ—Ä: -1001234567890

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

# SQLite
conn = sqlite3.connect("users.db")
cursor = conn.cursor()
cursor.execute("""
    CREATE TABLE IF NOT EXISTS subscriptions (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        expires_at TEXT
    )
""")
conn.commit()

# –ö–Ω–æ–ø–∫–∏
def get_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 5‚Ç¨", callback_data="pay")],
        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid")]
    ])

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT expires_at FROM subscriptions WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if row and datetime.strptime(row[0], "%Y-%m-%d %H:%M:%S") > datetime.utcnow():
        await message.answer("‚úÖ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.")
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ü–æ–¥–ø–∏—Å–∫–∞: 5‚Ç¨ / 1 –º–µ—Å—è—Ü", reply_markup=get_keyboard())

@dp.callback_query(F.data == "pay")
async def pay_handler(callback: types.CallbackQuery):
    await callback.message.answer("üí≥ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 5‚Ç¨ –Ω–∞ –∫–∞—Ä—Ç—É:\n<b>5354 5612 5103 8586</b>\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª.", parse_mode="HTML")

@dp.callback_query(F.data == "paid")
async def paid_handler(callback: types.CallbackQuery):
    user = callback.from_user
    await bot.send_message(
        ADMIN_ID,
        f"üßæ <b>{user.full_name}</b> —Å–æ–æ–±—â–∏–ª –æ–± –æ–ø–ª–∞—Ç–µ.\nID: <code>{user.id}</code>\nUsername: @{user.username}",
    )
    await callback.message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –æ–ø–ª–∞—Ç—É –∏ –æ—Ç–∫—Ä–æ–µ–º –≤–∞–º –¥–æ—Å—Ç—É–ø.")

@dp.message(F.text.startswith("/confirm"))
async def confirm_user(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        _, user_id = message.text.strip().split()
        user_id = int(user_id)
        username = (await bot.get_chat(user_id)).username or "no_username"
        expires_at = datetime.utcnow() + timedelta(days=30)
        cursor.execute("REPLACE INTO subscriptions (user_id, username, expires_at) VALUES (?, ?, ?)",
                       (user_id, username, expires_at.strftime("%Y-%m-%d %H:%M:%S")))
        conn.commit()
        invite_link = await bot.create_chat_invite_link(chat_id=CHANNEL_ID, member_limit=1)
        await bot.send_message(user_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞: {invite_link.invite_link}")
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

async def check_expired_users():
    while True:
        await asyncio.sleep(3600)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
        cursor.execute("SELECT user_id, expires_at FROM subscriptions")
        for user_id, expires in cursor.fetchall():
            try:
                if datetime.strptime(expires, "%Y-%m-%d %H:%M:%S") < datetime.utcnow():
                    await bot.ban_chat_member(CHANNEL_ID, user_id)
                    await bot.unban_chat_member(CHANNEL_ID, user_id)
                    cursor.execute("DELETE FROM subscriptions WHERE user_id = ?", (user_id,))
                    conn.commit()
                    await bot.send_message(ADMIN_ID, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {user_id}: {e}")

async def main():
    logging.basicConfig(level=logging.INFO)
    asyncio.create_task(check_expired_users())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
